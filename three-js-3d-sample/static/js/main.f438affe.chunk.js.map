{"version":3,"sources":["assets/glb/Walking.js","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","nodes","materials","animations","useAnimations","actions","mixer","useEffect","timeScale","play","texture","THREE","load","wrapS","wrapT","repeat","set","mesh","color","depthWrite","rotation","x","Math","PI","receiveShadow","ref","dispose","scale","object","mixamorigHips","material","Vanguard_VisorMat","geometry","vanguard_visor","skeleton","VanguardBodyMat","vanguard_Mesh","preload","App","className","camera","position","OrbitControls","intensity","fallback","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSASe,SAASA,EAAMC,GAC5B,IAAMC,EAAQC,mBADqB,EAEMC,YACvC,qCADMC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,UAAWC,EAFS,EAETA,WAFS,EAKRC,YAAcD,EAAYL,GAA7CO,EAL2B,EAK3BA,QAASC,EALkB,EAKlBA,MAEjBC,qBAAU,WACRD,EAAME,UAAY,GAClBH,EAAQ,cAAcI,UAGxB,IAAMC,GAAU,IAAIC,iBAAsBC,KAAK,aAC/CF,EAAQG,MAAQF,iBAChBD,EAAQI,MAAQH,iBAChBD,EAAQK,OAAOC,IAAI,EAAG,GAEtB,IAAMC,EAAO,IAAIN,OACf,IAAIA,gBAAoB,IAAM,KAC9B,IAAIA,oBAAwB,CAC1BO,MAAO,SACPC,YAAY,KAOhB,OAJAF,EAAKG,SAASC,GAAKC,KAAKC,GAAK,EAC7BN,EAAKO,eAAgB,EACrBP,EAAKP,QAAUA,EAGb,gDAAOe,IAAK3B,GAAWD,GAAvB,IAA8B6B,QAAS,KAAMC,MAAO,CAAC,IAAM,IAAM,KAAjE,UACE,2BAAWC,OAAQ3B,EAAM4B,gBACzB,6BACEC,SAAU5B,EAAU6B,kBACpBC,SAAU/B,EAAMgC,eAAeD,SAC/BE,SAAUjC,EAAMgC,eAAeC,WAEjC,6BACEJ,SAAU5B,EAAUiC,gBACpBH,SAAU/B,EAAMmC,cAAcJ,SAC9BE,SAAUjC,EAAMmC,cAAcF,WAEhC,2BAAWN,OAAQX,QAKzBjB,IAAQqC,QAAQ,qC,YChDKC,E,uKAYjB,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,CAAQC,OAAQ,CAAEC,SAAU,EAAE,EAAG,EAAG,IAApC,UACE,cAACC,EAAA,EAAD,IACA,8BAAcC,UAAW,IAEzB,2BAAWF,SAAU,CAAC,GAAI,IAAK,MAE/B,cAAC,WAAD,CAAUG,SAAU,KAApB,SACE,cAAC,EAAD,e,GArBqBC,aCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f438affe.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from \"react\";\n// import { useFrame } from \"react-three-fiber\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport * as THREE from \"three\";\n\nexport default function Model(props) {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\n    \"/three-js-3d-sample/vanguard_t_choonyung@Walking.glb\"\n  );\n  const { actions, mixer } = useAnimations(animations, group);\n\n  useEffect(() => {\n    mixer.timeScale = 0.8;\n    actions[\"mixamo.com\"].play();\n  });\n\n  const texture = new THREE.TextureLoader().load(\"grass.jpg\");\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.wrapT = THREE.RepeatWrapping;\n  texture.repeat.set(4, 4);\n\n  const mesh = new THREE.Mesh(\n    new THREE.PlaneGeometry(1000, 1000),\n    new THREE.MeshPhongMaterial({\n      color: 0x999999,\n      depthWrite: false,\n    })\n  );\n  mesh.rotation.x = -Math.PI / 2;\n  mesh.receiveShadow = true;\n  mesh.texture = texture;\n\n  return (\n    <group ref={group} {...props} dispose={null} scale={[0.01, 0.01, 0.01]}>\n      <primitive object={nodes.mixamorigHips} />\n      <skinnedMesh\n        material={materials.Vanguard_VisorMat}\n        geometry={nodes.vanguard_visor.geometry}\n        skeleton={nodes.vanguard_visor.skeleton}\n      />\n      <skinnedMesh\n        material={materials.VanguardBodyMat}\n        geometry={nodes.vanguard_Mesh.geometry}\n        skeleton={nodes.vanguard_Mesh.skeleton}\n      />\n      <primitive object={mesh} />\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/three-js-3d-sample/vanguard_t_choonyung@Walking.glb\");\n","import React, { Component, Suspense } from \"react\";\nimport \"./App.css\";\nimport { Canvas } from \"react-three-fiber\";\n\nimport Walking from \"./assets/glb/Walking\";\nimport { OrbitControls } from \"@react-three/drei\";\n\nexport default class App extends Component {\n  render() {\n    // let camera = THREE.PerspectiveCamera(\n    //   45,\n    //   window.innerWidth / window.innerHeight,\n    //   1,\n    //   1000\n    // );\n\n    // console.log(camera);\n\n    // camera={{ position: [100, 200, 300] }}\n    return (\n      <div className=\"App\">\n        <Canvas camera={{ position: [-2, 2, 2] }}>\n          <OrbitControls />\n          <ambientLight intensity={1} />\n          {/* <pointLight position={[10, 10, 10]} /> */}\n          <spotLight position={[10, 100, 10]} />\n\n          <Suspense fallback={null}>\n            <Walking />\n          </Suspense>\n          {/* <mesh\n            position={[0, 0, 0]}\n            scale={[100, 100]}\n            rotation={[-Math.PI / 2, 0, 0]}\n          >\n            <planeBufferGeometry attach=\"geometry\" arg={[1000, 1000]} />\n            <meshPhongMaterial\n              attach=\"material\"\n              color={0x999999}\n              depthWrite={false}\n              shadow={true}\n            />\n          </mesh> */}\n        </Canvas>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}